#+title: Emacs org-babel configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Variables for customization

  #+begin_src emacs-lisp

  (defvar keelerm/default-font-size 150)
  (defvar keelerm/default-variable-font-size 150)
  (defvar keelerm/org-directory "~/Documents/Dropbox/OrgFiles/")

  ;; Make frame transparency overridable
  (defvar keelerm/frame-transparency '(90 . 90))

  #+end_src

* Startup Performance

  #+begin_src emacs-lisp

    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

    (defun keelerm/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'keelerm/display-startup-time)

  #+end_src

* Custom Functions

** Buffer Management

   #+begin_src emacs-lisp
     (defun keelerm/hsplit-last-buffer (prefix)
       "Split the window vertically and display the previous buffer."
       (interactive "p")
       (split-window-vertically)
       (other-window 1 nil)
       (unless prefix
	 (switch-to-next-buffer)))

     (defun keelerm/vsplit-last-buffer (prefix)
       "Split the window horizontally and display the previous buffer."
       (interactive "p")
       (split-window-horizontally)
       (other-window 1 nil)
       (unless prefix (switch-to-next-buffer)))

     (defun keelerm/delete-current-buffer-file ()
       "Removes file connected to current buffer and kills buffer."
       (interactive)
       (let ((filename (buffer-file-name))
	     (buffer (current-buffer))
	     (name (buffer-name)))
	 (if (not (and filename (file-exists-p filename)))
	     (ido-kill-buffer)
	   (when (yes-or-no-p "Are you sure you want to remove this file? ")
	     (delete-file filename)
	     (kill-buffer buffer)
	     (message "File '%s' successfully removed" filename)))))

   #+end_src

* Package System Setup

  #+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ("org" . "https://orgmode.org/elpa/")
  ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

** Automatic updates

   #+begin_src emacs-lisp

     (use-package auto-package-update
       :custom
       (auto-package-update-interval 7)
       (auto-package-update-prompt-before-update t)
       (auto-package-update-hide-results t)
       :config
       (auto-package-update-maybe)
       (auto-package-update-at-time "09:00"))

   #+end_src

** Pick Up Shell Variables

   This allows us to pick up MANPATH, PATH, and exec-path from my shell.

   #+begin_src emacs-lisp

     (use-package exec-path-from-shell
       :ensure t
       :config
       (when (memq window-system '(mac ns x))
	 (exec-path-from-shell-initialize))
       (when (daemonp)
	 (exec-path-from-shell-initialize)))

   #+end_src
* Keep Folders Clean

  We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files
  and the Emacs configuration folder clean!  It knows about a wide
  variety of variables for built in Emacs features as well as those
  from community packages so it can be much easier than finding and
  setting these variables yourself.

  #+begin_src emacs-lisp

    ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
    ;; reliably, set `user-emacs-directory` before loading no-littering!
					    ;(setq user-emacs-directory "~/.cache/emacs")

    (use-package no-littering)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  #+end_src

* Basic UI Configuration

  #+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    (defalias 'yes-or-no-p 'y-or-n-p)
    (set-default 'truncate-lines t)

    (set-frame-parameter (selected-frame) 'alpha keelerm/frame-transparency)
    (add-to-list 'default-frame-alist `(alpha . ,keelerm/frame-transparency))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    treemacs-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (use-package neotree
      :ensure t)

  #+end_src

** Font Configuration

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "JetBrains Mono Medium" :height keelerm/default-font-size)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono Medium" :height keelerm/default-font-size)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "JetBrains Mono Medium" :height keelerm/default-variable-font-size :weight 'regular)
   #+end_src

* Keybinding Configuration

  This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

  #+begin_src emacs-lisp
    (bind-key "C-x 2" 'keelerm/vsplit-last-buffer)
    (bind-key "C-x 3" 'keelerm/hsplit-last-buffer)
    (bind-key "C-x C-k" 'keelerm/delete-current-buffer-file)
  #+end_src

  #+begin_src emacs-lisp

    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (use-package general
      :after evil
      :config
      (general-create-definer keelerm/leader-keys
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC")

      (keelerm/leader-keys
	"w" 'save-buffer
	"v" 'keelerm/vsplit-last-buffer
	"h" 'keelerm/hsplit-last-buffer
	"nt" 'neotree-toggle
	"nf" 'neotree-find
	"gs" 'magit-status
	"t"  '(:ignore t :which-key "toggles")
	"T" 'helm-imenu
	"fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")))
	"SPC b" 'evil-avy-goto-word-1-above
	"SPC w" 'evil-avy-goto-word-1-below
	"SPC F" 'evil-avy-goto-char-2-above
	"SPC f" 'evil-avy-goto-char-2-below
	))

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode 1))

  #+end_src

* UI Configuration

** Color Theme

   #+begin_src emacs-lisp

     (use-package doom-themes
       :init (load-theme 'doom-gruvbox t))

   #+end_src

** Better Modeline

   #+begin_src emacs-lisp

     (use-package all-the-icons)

     (use-package doom-modeline
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 15)))

   #+end_src

** Which Key

   #+begin_src emacs-lisp

     (use-package which-key
       :defer 0
       :diminish which-key-mode
       :config
       (which-key-mode)
       (setq which-key-idle-delay 1))

   #+end_src 

* Org Mode
  
** Basic Config
   
  #+begin_src emacs-lisp

    (defun keelerm/org-mode-setup ()
      (setq org-adapt-indentation t
	    org-hide-leading-stars nil
	    org-odd-levels-only t)
      (visual-line-mode 1))

    (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . keelerm/org-mode-setup)
      :config
      (setq org-ellipsis " â–¾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (setq org-agenda-filesa
	    '("~/Documents/Dropbox/OrgFiles/"))

      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 60)

      (setq org-todo-keywords
	    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-refile-targets
	    '(("Archive.org" :maxlevel . 1)
	      ("Tasks.org" :maxlevel . 1)))

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-tag-alist
	    '((:startgroup)
					    ; Put mutually exclusive tags here
	      (:endgroup)
	      ("@errand" . ?E)
	      ("@home" . ?H)
	      ("@work" . ?W)
	      ("agenda" . ?a)
	      ("planning" . ?p)
	      ("publish" . ?P)
	      ("batch" . ?b)
	      ("note" . ?n)
	      ("idea" . ?i)))

      ;; Configure custom agenda views
      (setq org-agenda-custom-commands
	    '(("d" "Dashboard"
	       ((agenda "" ((org-deadline-warning-days 7)))
		(todo "NEXT"
		      ((org-agenda-overriding-header "Next Tasks")))
		(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	      ("n" "Next Tasks"
	       ((todo "NEXT"
		      ((org-agenda-overriding-header "Next Tasks")))))

	      ("W" "Work Tasks" tags-todo "+work-email")

	      ;; Low-effort next actions
	      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	       ((org-agenda-overriding-header "Low Effort Tasks")
		(org-agenda-max-todos 20)
		(org-agenda-files org-agenda-files)))

	      ("w" "Workflow Status"
	       ((todo "WAIT"
		      ((org-agenda-overriding-header "Waiting on External")
		       (org-agenda-files org-agenda-files)))
		(todo "REVIEW"
		      ((org-agenda-overriding-header "In Review")
		       (org-agenda-files org-agenda-files)))
		(todo "PLAN"
		      ((org-agenda-overriding-header "In Planning")
		       (org-agenda-todo-list-sublevels nil)
		       (org-agenda-files org-agenda-files)))
		(todo "BACKLOG"
		      ((org-agenda-overriding-header "Project Backlog")
		       (org-agenda-todo-list-sublevels nil)
		       (org-agenda-files org-agenda-files)))
		(todo "READY"
		      ((org-agenda-overriding-header "Ready for Work")
		       (org-agenda-files org-agenda-files)))
		(todo "ACTIVE"
		      ((org-agenda-overriding-header "Active Projects")
		       (org-agenda-files org-agenda-files)))
		(todo "COMPLETED"
		      ((org-agenda-overriding-header "Completed Projects")
		       (org-agenda-files org-agenda-files)))
		(todo "CANC"
		      ((org-agenda-overriding-header "Cancelled Projects")
		       (org-agenda-files org-agenda-files)))))))

      (define-key global-map (kbd "C-c j")
	(lambda () (interactive) (org-capture nil "jj"))))

    #+end_src

*** Center Org Buffers

    We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more
    pleasing writing experience as it centers the contents of the
    buffer horizontally to seem more like you are editing a document.
    This is really a matter of personal preference so you can remove
    the block below if you don't like the behavior.

    #+begin_src emacs-lisp

      (defun keelerm/org-mode-visual-fill ()
	(setq visual-fill-column-width 100
	      visual-fill-column-center-text t)
	(visual-fill-column-mode 1))

      (use-package visual-fill-column
	:hook (org-mode . keelerm/org-mode-visual-fill))

    #+end_src

** Configure Babel Languages

   To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

   #+begin_src emacs-lisp

     (with-eval-after-load 'org
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)
	  (python . t)))

       (push '("conf-unix" . conf-unix) org-src-lang-modes))

   #+end_src

** Auto-tangle Configuration Files

   #+begin_src emacs-lisp
     
     ;; Automatically tangle our Emacs.org config file when we save it
     (defun keelerm/org-babel-tangle-config ()
       (when (string-equal (file-name-directory (buffer-file-name))
			   (expand-file-name user-emacs-directory))
	 ;; Dynamic scoping to the rescue
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'keelerm/org-babel-tangle-config)))


   #+end_src

* Development
** Languages

*** IDE Features with lsp-mode

**** lsp-mode

     We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality
     for many different programming languages via "language servers"
     that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up
     =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation
     for your language]] so that you can learn which language servers
     are available and how to install them.

     The =lsp-keymap-prefix= setting enables you to define a prefix
     for where =lsp-mode='s default keybindings will be added. I
     *highly recommend* using the prefix to find out what you can do
     with =lsp-mode= in a buffer.

     The =which-key= integration adds helpful descriptions of the
     various keys so you should be able to learn a lot just by
     pressing =C-c l= in a =lsp-mode= buffer and trying different
     things that you find there.

     #+begin_src emacs-lisp

       (defun keelerm/lsp-mode-setup ()
	 (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	 (lsp-headerline-breadcrumb-mode))

       (use-package lsp-mode
	 :commands (lsp lsp-deferred)
	 :hook (lsp-mode . keelerm/lsp-mode-setup)
	 :init
	 (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
	 :config
	 (lsp-install-server nil 'omnisharp)
	 (lsp-enable-which-key-integration t))

     #+end_src

**** lsp-ui

     [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode=
     which make Emacs feel even more like an IDE. Check out the
     screenshots on the =lsp-ui= homepage (linked at the beginning of
     this paragraph) to see examples of what it can do.

     #+begin_src emacs-lisp

       (use-package lsp-ui
	 :hook (lsp-mode . lsp-ui-mode)
	 :custom
	 (lsp-ui-doc-position 'bottom))

     #+end_src

**** lsp-treemacs

     [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of
     your code like symbols in a file, references of a symbol, or
     diagnostic messages (errors and warnings) that are found in your
     code.

     Try these commands with =M-x=:

     - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
     - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
     - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

     This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of
     some interest to you if you like to have a file browser at the
     left side of your screen in your editor.

     #+begin_src emacs-lisp

       (use-package lsp-treemacs
	 :after lsp)

     #+end_src

*** C#

    #+begin_src emacs-lisp
      (use-package csharp-mode
	:ensure t
	:hook (csharp-mode . lsp-deferred))
    #+end_src

** Haskell

   #+begin_src emacs-lisp
     (use-package lsp-haskell
       :ensure t)

     (use-package haskell-mode
       :ensure t
       :hook
       (haskell-mode . lsp-deferred)
       (haskell-literate-mode . lsp-deferred))
   #+end_src

*** Ruby

    #+begin_src emacs-lisp

      (use-package ruby-mode
	:ensure t
	:hook (ruby-mode . lsp-deferred))

      (use-package projectile-rails
	:commands (projectile-rails-root)
	:custom (projectile-rails-global-mode t)
	:config
	(define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map))

    #+end_src

** Helm

   #+begin_src emacs-lisp

     (use-package helm
       :diminish helm-mode
       :init
       :bind (("M-x" . helm-M-x)
	      ("M-y" . helm-show-kill-ring)
	      ("C-c h" . helm-mini)
	      ("C-x b" . helm-buffers-list)))

     (use-package helm-projectile)

   #+end_src

** Projectile

   [[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it
   a lot easier to navigate around code projects for various
   languages. Many packages integrate with Projectile so it's a good
   idea to have it installed even if you don't use its commands
   directly.

   #+begin_src emacs-lisp

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'helm))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       ;; NOTE: Set this to the folder where you keep your Git repos!
       (when (file-directory-p "~/code")
	 (setq projectile-project-search-path '("~/code")))
       (setq projectile-use-git-grep t)
       (setq projectile-switch-project-action #'projectile-dired))

   #+end_src

** Magit

   [[https://magit.vc/][Magit]] is the best Git interface I've ever used. Common Git
   operations are easy to execute quickly using Magit's command panel
   system.

   #+begin_src emacs-lisp

     (use-package magit
       :commands magit-status
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

     ;; NOTE: Make sure to configure a GitHub token before using this package!
     ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
     ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
     (use-package forge
       :after magit)

   #+end_src

** Ace Jump Mode

   #+begin_src emacs-lisp
     (use-package avy)
   #+end_src

* Runtime Performance

  Dial the GC threshold back down so that garbage collection happens
  more frequently but in less time.

  #+begin_src emacs-lisp

    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))

  #+end_src



  #   (custom-set-variables
  #  ;; custom-set-variables was added by Custom.
  #  ;; If you edit it by hand, you could mess it up, so be careful.
  #  ;; Your init file should contain only one such instance.
  #  ;; If there is more than one, they won't work right.
  #  '(package-selected-packages
  #    '(helpful which-key doom-modeline all-the-icons doom-themes no-littering auto-package-update use-package)))
  # (custom-set-faces
  #  ;; custom-set-faces was added by Custom.
  #  ;; If you edit it by hand, you could mess it up, so be careful.
  #  ;; Your init file should contain only one such instance.
  #  ;; If there is more than one, they won't work right.
  #  )
